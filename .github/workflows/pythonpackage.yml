name: RunTests

on: [push, pull_request]

jobs:
  test_windows:
    env:
      SOMEENV: helloworld
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - uses: actions/cache@v2
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock') }}

    - name: Print environment variables (windows)
      run: |
        ls env:

    - name: Print python location (windows)
      run: |
        echo $env:pythonLocation

    - name: Install dependencies
      run: |
        python -m pip install poetry
        poetry install

    - name: Test with pytest
      run: |
        poetry run pytest test

    - name: Run main.py
      run: |
        poetry run python main.py

    - name: Run radon (cyclomatic complexity report)
        # './' denotes the current directory
      run: |
        poetry run radon cc ./ -a -nb

    - name: Run mypy (type checking)
      run: |
        poetry run mypy .

  test_linux_mac:
    env:
      SOMEENV: helloworld
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
        mongodb-version: [5.0.0]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Start MongoDB in docker (linux)
      run: |
        docker run --rm -d -p 27017-27019:27017-27019 --name mongodb mongo:${{ matrix.mongodb-version }}
      if: matrix.os == 'ubuntu-latest'

    - name: Start Postgres in docker (linux)
      run: |
        docker run --rm -d --name postgresql-container -p 5432:5432 \
          -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=changeme postgres:9.6.23-alpine3.14
      if: matrix.os == 'ubuntu-latest'

    - uses: actions/cache@v2
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock') }}

    - name: Print environment variables (linux)
      run: |
        printenv

    - name: Install dependencies
      run: |
        python -m pip install poetry
        poetry install

    - name: Test with pytest
      run: |
        poetry run pytest test

    - name: Run main.py
      run: |
        poetry run python main.py

    - name: Run radon (cyclomatic complexity report)
      # './' denotes the current directory
      run: |
        poetry run radon cc ./ -a -nb

    - name: Run mypy (type checking)
      run: |
        poetry run mypy .

  build_and_publish:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10']
    runs-on: ${{ matrix.os }}
    needs: [test_linux_mac, test_windows]

    steps:
    - uses: actions/checkout@v1

    - uses: actions/cache@v2
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-prod-${{ hashFiles('poetry.lock') }}

    - name: Install dependencies
      run: |
        python -m pip install poetry
        poetry install --no-dev

    - name: Build
      run: |
        poetry build

      # Publish package on pypi
    - name: Publish
      continue-on-error: true
      run: |
        poetry publish --username ${{ secrets.pypi_username }} --password ${{ secrets.pypi_password }}

    # Push files to remote server
    # https://github.com/marketplace/actions/scp-files
    # https://github.com/appleboy/scp-action/blob/master/action.yml
#    - name: Copy files via ssh passphrase
#      uses: appleboy/scp-action@master
#      with:
#        # Host ip address
#        host: ${{ secrets.HOST }}
#        port: 22
#        # My username on the host machine
#        username: ${{ secrets.USERNAME }}
#        # Contents of .ssh/id_dsa, private RSA key
#        key: ${{ secrets.KEY }}
#        # Passphrase to decrypt private key
#        passphrase: ${{ secrets.PASSPHRASE }}
#        source: .
#        target: /home/${{ env.USERNAME }}/${{ env.USERNAME }}
#      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.7'

    # Log in to remote host and execute scripts
    # Updating .service file requires target machine to have existing /etc/systemd/system/${{env.SERVICENAME}}.service file and chown to this user
    # Disabling and enabling service requires entries in the visudo file with
    # <username_here> ALL=(ALL) NOPASSWD: /bin/systemctl daemon-reload
    # <username_here> ALL=(ALL) NOPASSWD: /bin/systemctl disable <service_name_here>
    # <username_here> ALL=(ALL) NOPASSWD: /bin/systemctl enable <service_name_here>
#    - name: Executing remote ssh commands using passphrase
#      uses: appleboy/ssh-action@master
#      with:
#        host: ${{ secrets.HOST }}
#        port: 22
#        username: ${{ secrets.USERNAME }}
#        key: ${{ secrets.KEY }}
#        passphrase: ${{ secrets.PASSPHRASE }}
#        script: |
#          sudo /bin/systemctl disable --now ${{ env.SERVICENAME }}
#          cd "/home/${{ env.USERNAME}}/${{ env.USERNAME }}"
#          poetry install --no-dev
#          cp "/home/${{ env.USERNAME }}/${{ env.USERNAME }}/systemd/${{ env.SERVICENAME }}.service" "/etc/systemd/system/${{ env.SERVICENAME }}.service"
#          sudo /bin/systemctl daemon-reload
#          sudo /bin/systemctl enable --now ${{ env.SERVICENAME }}
#      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.7'
