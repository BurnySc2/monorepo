[tool.poetry]
name = "fastapi-server"
version = "0.1.0"
description = ""
authors = ["BuRny <gamingburny@gmail.com>"]
package-mode = false

[tool.poetry.dependencies]
# Drop python <=3.9 support because syntax "var: int | None" is not supported 
python = ">=3.10 <3.13"
# Simple logger
loguru = "^0.7"
# Fastapi alternative https://docs.litestar.dev/latest/
litestar = { extras = ["standard"], version = "^2.5.1" }
# Web requests (sync + async)
httpx = "^0"
httpx-ws = "^0"      # Websockets for httpx
arrow = "^1"         # Time management
python-dotenv = "^1" # Load .env files easily
pydantic = "^2"      # Dataclasses with type validation
nltk = "^3"          # Language manipulation
mutagen = "^1"       # Analyse mp3 files in memory
# Database
prisma = "^0"
# PDF Parsing
pymupdf = "^1"
# Epub Parsing
ebooklib = "^0"       # epub parsing
beautifulsoup4 = "^4" # xml parsing
# Other
edge-tts = "^6"   # Audio generation
stream-zip = "^0" # Zip files with low memory footprint
minio = "^7"      # AWS S3

[tool.poetry.group.dev.dependencies]
# Test library
pytest = "^8"
pytest-asyncio = "^0"          # Async await support
pytest-benchmark = "^4"
pytest-httpx = "^0"            # Mock requests
pytest-env = "^1"              # Set different env while testing
pytest-random-order = "^1.1.1"
# Property based testing
hypothesis = "^6"
# Info about the system
psutil = "^5"
toml = "^0"
# Linter and autoformat
ruff = "^0"
# Type checker
pyre-check = "^0"
# Analyze depenencies
pipdeptree = "^2"

[build-system]
requires = ["poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"

[tool.yapf]
based_on_style = "pep8"
column_limit = 120
split_arguments_when_comma_terminated = true
dedent_closing_brackets = true
allow_split_before_dict_value = false

[tool.ruff]
target-version = 'py310'
line-length = 120
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
    "C4",  # flake8-comprehensions
    "E",   # Error
    "F",   # pyflakes
    "BLE", # flake8-blind-except
    "I",   # isort
    "N",   # pep8-naming
    "PGH", # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "W",   # Warning
    "Q",   # flake8-quotes
    "YTT", # flake8-2020
    "UP",  # pyupgrade
    #    "A",  # flake8-builtins
]

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["pydantic.validator", "classmethod"]

[tool.pytest_env]
# Env variables to be used while tests run
STAGE = "test"
POSTGRES_CONNECTION_STRING = "postgresql://test:test@localhost:5433/test"
BACKEND_SERVER_URL = "http://localhost:8000"
MINIO_URL = "localhost:9000"
MINIO_AUDIOBOOK_BUCKET = "audiobooks-test"
