[tool.poetry]
name = "fastapi_server"
version = "0.1.0"
description = ""
authors = ["BuRny <gamingburny@gmail.com>"]

[tool.poetry.dependencies]
# Drop python <=3.9 support because syntax "var: int | None" is not supported 
python = ">=3.10 <3.12"
# Simple logger
loguru = "^0.5"
# Fastapi alternative https://docs.litestar.dev/latest/
litestar = { extras = ["standard"], version = "^2.5.1" }
# Requests (sync + async)
requests = "^2.31.0"
aiohttp = "^3.8.5"
arrow = "^1.2.3"         # Time management
python-dotenv = "^1.0.0" # Load .env files easily
pydantic = "^2"          # Dataclasses with type validation
nltk = "^3.8.1"          # Language manipulation
twitchio = "^2.8.2"      # Twitch chat bot
soundfile = "^0.12.1"    # Analyse mp3 files in memory
# Other
numpy = "^1.26.3"
dataset = "^1.6.2"
psycopg2-binary = "^2.9.9"
edge-tts = "^6.1.11"
pymupdf = "^1.24.2"        # fitz for pdf
ebooklib = "^0.18"         # epub parsing
beautifulsoup4 = "^4.12.3" # xml parsing

[tool.poetry.group.dev.dependencies]
# Test library
pytest = "^7.1"
pytest-asyncio = "^0.23"
pytest-benchmark = "^4.0"
# Property based testing
hypothesis = "^6.39.3"
# Info about the system
psutil = "^5.9.1"
# End to end tests
playwright = "^1.22.0"
pytest-playwright = "^0.3.0"
toml = "^0.10.2"
# Linter and autoformat
ruff = "^0.1.14"
# Type checker
pyre-check = "^0.9.18"
# Analyze depenencies
pipdeptree = "^2.13.1"
# SQL formatting and validating
sqlfluff = "^2.3.5"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.yapf]
based_on_style = "pep8"
column_limit = 120
split_arguments_when_comma_terminated = true
dedent_closing_brackets = true
allow_split_before_dict_value = false

[tool.ruff]
target-version = 'py310'
line-length = 120
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
    "C4",  # flake8-comprehensions
    "E",   # Error
    "F",   # pyflakes
    "BLE", # flake8-blind-except
    "I",   # isort
    "N",   # pep8-naming
    "PGH", # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "W",   # Warning
    "Q",   # flake8-quotes
    "YTT", # flake8-2020
    "UP",  # pyupgrade
    #    "A",  # flake8-builtins
]

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["pydantic.validator", "classmethod"]

[tool.sqlfluff.core]
# https://docs.sqlfluff.com/en/stable/configuration.html#configuration-files
templater = "placeholder"
sql_file_exts = ".sql"
dialect = "postgres"
max_line_length = 120

[tool.sqlfluff]
indent_unit = "space"

[tool.sqlfluff.templater.placeholder]
# https://docs.sqlfluff.com/en/stable/configuration.html#placeholder-templater
param_style = "percent"

[tool.sqlfluff.rules.capitalisation.keywords]
capitalisation_policy = "upper"
