generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = "5"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_CONNECTION_STRING")
}

model AudiobookBook {
  id                 Int                @id @default(autoincrement())
  uploaded_by        String
  book_title         String
  book_author        String
  chapter_count      Int
  upload_date        DateTime           @default(now())
  custom_book_title  String?
  custom_book_author String?
  AudiobookChapter   AudiobookChapter[]

  @@index([id, uploaded_by])
  @@index([uploaded_by, book_title, book_author])
  @@map("litestar_audiobook_book")
}

model AudiobookChapter {
  id                 Int           @id @default(autoincrement())
  book_id            Int
  queued             DateTime?
  started_converting DateTime?
  chapter_title      String
  chapter_number     Int
  word_count         Int
  sentence_count     Int
  content            String
  minio_object_name  String?
  audio_settings     Json?
  book               AudiobookBook @relation(fields: [book_id], references: [id], onDelete: Cascade)

  @@index([book_id, chapter_number])
  @@map("litestar_audiobook_chapter")
}

model TelegramChannel {
  id               Int               @id @default(autoincrement())
  channel_id       BigInt            @unique
  channel_title    String
  channel_username String?
  creation_date    DateTime
  participants     BigInt
  last_parsed      DateTime          @default(dbgenerated("'2000-01-01 00:00:00'::timestamp without time zone"))
  TelegramMessage  TelegramMessage[]

  @@index([channel_id])
  @@index([channel_title])
  @@index([channel_username])
  @@map("litestar_telegram_channel")
}

model TelegramMessage {
  id                               Int             @id @default(autoincrement())
  channel_id                       BigInt
  message_id                       BigInt
  message_date                     DateTime
  message_text                     String?
  amount_of_reactions              BigInt          @default(0)
  amount_of_comments               BigInt          @default(0)
  status                           Status          @default(NoFile)
  file_downloadinfo_id             BigInt?
  file_downloadinfo_access_hash    BigInt?
  file_downloadinfo_file_reference Bytes?
  downloading_start_time           DateTime?
  mime_type                        String?
  file_extension                   String?
  file_size_bytes                  BigInt?
  file_duration_seconds            Float?
  file_height                      Int?
  file_width                       Int?
  minio_object_name                String?
  downloading_retry_attempt        Int             @default(0)
  channel                          TelegramChannel @relation(fields: [channel_id], references: [channel_id], onDelete: Cascade)

  @@index([channel_id, message_id])
  @@index([amount_of_comments(sort: Desc)])
  @@index([amount_of_reactions(sort: Desc)])
  @@index([channel_id])
  @@index([file_duration_seconds])
  @@index([file_extension])
  @@index([file_height])
  @@index([file_size_bytes])
  @@index([file_width])
  @@index([message_date(sort: Desc)])
  @@index([message_id])
  @@index([message_text(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([mime_type])
  @@index([status])
  @@map("litestar_telegram_message")
}

enum Status {
  NoFile
  HasFile
  Queued
  Downloading
  Downloaded
}
