# Use http://www.yamllint.com/
# to validate .yml file

sudo: required
language: python
services: docker

#before_install:
#  - docker pull python 3.6
#  - docker pull python 3.7
##  - docker ps -a

jobs:
  include:
    - stage: test python 3.6
      script:
        # Pull docker image
        - docker pull python:3.6
        # Create docker container called "app" from image "python:3.6"
        - docker run -it -d --name app python:3.6
        # List contents of current folder
        - ls
        # Copy repository files and folders to docker container
        - docker cp . app:/root/template
        # List contents of container
        - docker exec app ls /root/template
        # Upgrade pipenv (and implicitly pip)
        - docker exec app pip install --upgrade pipenv
        # Create pipenv virtual environment and install dev packages for testing
        # Command origins from here: https://stackoverflow.com/a/28037991/10882657
        - docker exec -i app bash -c "cd /root/template && pipenv install --dev"
        # Run tests
        - docker exec -i app bash -c "cd /root/template && pipenv run pytest tests/"
        # Remove container
        - docker rm -f app
    - stage: test python 3.7
      script:
        - docker run -it -d --name app python:3.7
        - docker cp . app:/root/template
        - docker exec app pip install --upgrade pipenv
        # Specify python version because it is different from the required version "python 3.6"
        - docker exec -i app bash -c "cd /root/template && pipenv --python python install --dev"
        # Dont have to specify python version here
        - docker exec -i app bash -c "cd /root/template && pipenv run pytest tests/"
        - docker rm -f app


#install:
#  # Build new image with name "test_image"
#  - docker build -t "test_image" -f "tests/Dockerfile" .
#  # Create new container with name "app".
#  # Run with -it to keep container from exiting
#  - docker run -it -d --name app test_image
#  # List running containers
#  - docker ps -a
#
#script:
##  - docker exec app python -m pip install --upgrade pipenv
##  - docker exec app pipenv install --dev
#  # Run Tests
#  - docker exec app pipenv run pytest tests/
#
#after_script:
#  # Delete container
#  - docker rm -f app
#










#language: python
#sudo: false
## Defining it at the top will override it from default (trusty) to xenial
## Xenial allows python 3.7 and dev versions of python
## Also trusty is deprecated, see: https://docs.travis-ci.com/user/reference/overview/#deprecated-virtualization-environments
#dist: xenial
#
#
## See: https://docs.travis-ci.com/user/build-matrix/
#matrix:
#  include:
#    - python: "3.6"
#      os: linux
#
#    - python: "3.7"
#      os: linux
#
#    # TODO: uncomment when 3.8 is released
##    - python: "3.8"
##      os: linux
#
#    - python: "3.6-dev"
#      os: linux
#
#    - python: "3.7-dev"
#      os: linux
#
#    - python: "3.8-dev"
#      os: linux
#
#
#  # Builds that are allowed to fail
#  allow_failures:
#    - python: "3.8"
#    - python: "3.6-dev"
#    - python: "3.7-dev"
#    - python: "3.8-dev"
#
#  # Now, the build result will be determined as soon as all the required jobs finish, based on these results, while the rest of the allow_failures jobs continue to run.
#  fast_finish: true
#
#
#install:
#  # Implicitly also upgrades pip version
#  - "pip install --upgrade pipenv"
#  - "pipenv install --dev"
#
#
#script:
#  - python --version
##  Test only a single file:
##  - "pipenv run pytest tests/test_functions.py"
##  Test the whole folder of test files:
#  - "pipenv run pytest tests/"